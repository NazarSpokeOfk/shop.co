// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  user_id   Int            @id @default(autoincrement())
  email     String         @unique
  name      String
  password  String

  cart      Cart[]
  reviews   Goods_reviews[]
  website_review Website_reviews?
}

model Website_reviews {
  review_id Int @id @default(autoincrement())
  user_id Int @unique
  rating Int
  review String
  reviewer_name String
  created_at DateTime        @default(now())

  user Users? @relation(fields: [user_id], references: [user_id])
}

model Goods {
  good_id      Int             @id @default(autoincrement())
  good_name    String          @unique
  price        Int
  dress_style  String
  color        String
  size         String
  sex          String
  brand        String
  arrival_time DateTime        @default(now())
  category     String

  cart         Cart[]
  description  Description?
  details      Details?
  photos       Photos[]
  reviews      Goods_reviews[]
}

model Cart {
  position_id  Int    @id @default(autoincrement())
  user_id      Int
  good_id      Int
  quantity     Int    @default(1)
  total_price  Int    @default(0)     
  user Users? @relation(fields: [user_id], references: [user_id])
  good Goods? @relation(fields: [good_id], references: [good_id])
}

model Description {
  good_id   Int    @id
  good_desc String

  good Goods @relation(fields: [good_id], references: [good_id])
}

model Details {
  good_id   Int    @id
  materials String
  seasons   String

  good Goods @relation(fields: [good_id], references: [good_id])
}

model Photos {
  photo_id Int    @id @default(autoincrement())
  good_id  Int
  photo    String

  good Goods @relation(fields: [good_id], references: [good_id])
}

model Goods_reviews {
  review_id     Int      @id @default(autoincrement())
  good_id       Int
  user_id       Int
  rating        Float
  review        String
  posted_at     DateTime @default(now())

  good  Goods @relation(fields: [good_id], references: [good_id])
  user  Users? @relation(fields: [user_id], references: [user_id])

  @@unique([good_id, user_id])
}